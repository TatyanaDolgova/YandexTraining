// Некоторый банк хочет внедрить систему управления счетами клиентов, поддерживающую следующие операции:

// Пополнение счета клиента.

// Снятие денег со счета.

// Запрос остатка средств на счете.

// Перевод денег между счетами клиентов.

// Начисление процентов всем клиентам.

// Вам необходимо реализовать такую систему. Клиенты банка идентифицируются именами (уникальная строка, не 
// содержащая пробелов). Первоначально у банка нет ни одного клиента. Как только для клиента проводится 
// операция пололнения, снятия или перевода денег, ему заводится счет с нулевым балансом. Все дальнейшие 
// операции проводятся только с этим счетом. Сумма на счету может быть как положительной, так и отрицательной, 
// при этом всегда является целым числом.

// Формат ввода
// Входной файл содержит последовательность операций. Возможны следующие операции: DEPOSIT name sum - 
// зачислить сумму sum на счет клиента name. Если у клиента нет счета, то счет создается. WITHDRAW name sum 
// - снять сумму sum со счета клиента name. Если у клиента нет счета, то счет создается. BALANCE name - 
// узнать остаток средств на счету клиента name. TRANSFER name1 name2 sum - перевести сумму sum со счета 
// клиента name1 на счет клиента name2. Если у какого-либо клиента нет счета, то ему создается счет. INCOME p - 
// начислить всем клиентам, у которых открыты счета, p% от суммы счета. Проценты начисляются только клиентам 
// с положительным остатком на счету, если у клиента остаток отрицательный, то его счет не меняется. После 
// начисления процентов сумма на счету остается целой, то есть начисляется только целое число денежных 
// единиц. Дробная часть начисленных процентов отбрасывается.
// 
// Формат вывода
// Для каждого запроса BALANCE программа должна вывести остаток на счету данного клиента. Если же у клиента 
// с запрашиваемым именем не открыт счет в банке, выведите ERROR.
// Пример 1
// Ввод
// DEPOSIT Ivanov 100
// INCOME 5
// BALANCE Ivanov
// TRANSFER Ivanov Petrov 50
// WITHDRAW Petrov 100
// BALANCE Petrov
// BALANCE Sidorov
// Вывод
// 105
// -50
// ERROR
const fs = require('fs');
const data = fs.readFileSync('input.txt', { encoding: 'utf8' });
let list = data.trim().toString().split('\n');
let result = '';
const obj = {};

for (let i = 0; i < list.length; i++) {
  const datas = list[i].split(' ');
  if (!obj.hasOwnProperty(datas[1]) && datas.length !== 2) {
    obj[datas[1]] = 0;
  }
  if (datas[0] === 'DEPOSIT') {
    obj[datas[1]] += +datas[2];
  }
  if (datas[0] === 'WITHDRAW') {
    obj[datas[1]] -= +datas[2];
  }
  if (datas[0] === 'INCOME') {
    for (let [key, value] of Object.entries(obj)) {
      if (obj[key] > 0) {
        obj[key] += Math.floor(value / 100 * datas[1]);
      }
    }
  }
  if (datas[0] === 'TRANSFER') {
    if (!obj.hasOwnProperty(datas[2])) {
      obj[datas[2]] = 0;
    }
    obj[datas[1]] -= +datas[3];
    obj[datas[2]] += +datas[3];
  }
  if (datas[0] === 'BALANCE') {
    if (!obj.hasOwnProperty(datas[1])) {
      result += `ERROR\n`
    } else {
      result += `${obj[datas[1]]}\n`
    }
  }
}
fs.writeFileSync('output.txt', result.toString());