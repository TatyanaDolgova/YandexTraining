// Для освоения Марса требуется построить исследовательскую базу. База должна состоять из n одинаковых модулей, 
// каждый из которых представляет собой прямоугольник.

// Каждый модуль представляет собой жилой отсек, который имеет форму прямоугольника размером a на b метров. 
// Для повышения надежности модулей инженеры могут добавить вокруг каждого модуля слой дополнительной защиты. 
// Толщина этого слоя должна составлять целое число метров, и все модули должны иметь одинаковую толщину 
// дополнительной защиты. Модуль с защитой, толщина которой равна d метрам, будет иметь форму прямоугольника 
// размером (a+2d)(b+2d) метров.

// Все модули должны быть расположены на заранее подготовленном прямоугольном поле размером wh метров. 
// При этом они должны быть организованы в виде регулярной сетки: их стороны должны быть параллельны сторонам 
// поля, и модули должны быть ориентированы одинаково.

// Требуется написать программу, которая по заданным количеству и размеру модулей, а также размеру поля для 
// их размещения, определяет максимальную толщину слоя дополнительной защиты, который можно добавить к каждому 
// модулю.

// Формат ввода
// Входной файл содержит пять разделенных пробелами целых чисел: n, a, b, w и h (1 ≤ n, a, b, w, h ≤ 1018). 
// Гарантируется, что без дополнительной защиты все модули можно разместить в поселении описанным образом.

// Формат вывода
// Выходной файл должен содержать одно целое число: максимальную возможную толщину дополнительной защиты. 
// Если дополнительную защиту установить не удастся, требуется вывести число 0.

// Пример 1
// Ввод
// 1 1 1 1 1
// Вывод
// 0
// Пример 2
// Ввод	
// 1 1 1 3 3
// Вывод
// 1
const fs = require('fs');

const data = fs.readFileSync('input.txt', { encoding: 'utf8' });
const list = data.toString().trim().split(' ');

const n = +list[0];
const a = +list[1];
const b = +list[2];
const w = +list[3];
const h = +list[4];

const binarySearch = () => {
  let right = Math.max(w, h);
  let countW = Math.
  let left = 0;
  let mid;

  while (left < right) {
    mid = Math.floor((right + left) / 2);

    let countW = Math.floor(mid / w);
    let countH = Math.floor(mid / h);

    if (countH * countW >= k) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  return left;
}

binarySearch(w, a);

let result = binarySearch();
fs.writeFileSync('output.txt', result.toString());