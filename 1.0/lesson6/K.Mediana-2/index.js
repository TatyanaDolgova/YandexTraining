// Дано N упорядоченных по неубыванию последовательностей целых чисел (т.е. каждый следующий элемент больше либо равен
// предыдущему), в каждой из последовательностей ровно L элементов. Для каждых двух последовательностей выполняют
// следующую операцию: объединяют их элементы (в объединенной последовательности каждое число будет идти столько раз,
// сколько раз оно встречалось суммарно в объединяемых последовательностях), упорядочивают их по неубыванию и смотрят,
// какой элемент в этой последовательности из 2L элементов окажется на месте номер L (этот элемент называют левой 
// медианой).

// Напишите программу, которая для каждой пары последовательностей выведет левую медиану их объединения.

// Формат ввода
// Сначала вводятся числа N и L (2 ≤ N ≤ 100, 1 ≤ L ≤ 300). В следующих N строках задаются последовательности. 
// Kаждая последовательность состоит из L чисел, по модулю не превышающих 30000.

// Формат вывода
// В первой строке выведите медиану объединения 1-й и 2-й последовательностей, во второй строке — объединения 1-й 
// и 3-й, и так далее, в (N‑1)-ой строке — объединения 1-й и N-ой последовательностей, далее медиану объединения 2-й
// и 3-й, 2-й и 4-й, и т.д. до 2-й и N-ой, затем 3-й и 4-й и так далее. В последней строке должна быть выведена 
// медиана объединения (N–1)-й и N-ой последовательностей.

// Пример
// Ввод
// 3 6
// 1 4 7 10 13 16 
// 0 2 5 9 14 20 
// 1 7 16 16 21 22 
// Вывод
// 7
// 10
// 9

const fs = require('fs');

const data = fs.readFileSync('input.txt', { encoding: 'utf8' });
const [n, l] = data.toString().trim().split('\n')[0].split(' ');
const arrays = data.toString().trim().split('\n').slice(1).map(item => item.trim());

const binarySearch = (l, arrays) => {
  for (let i = 0; i < arrays.length - 1; i++) {
    let max = arr[i].length + arr[i + 1].length;

    let right = max + 1;
    let left = -1;
    let mid;

    while (right - left > 1) {
      mid = Math.floor((right + left) / 2);

      let count = 0;

      let i = 0;
      let j = c - 1;

      while (i <= arr.length - c && j < arr.length) {
        if (arr[j] - arr[i] <= mid) {
          count++;
          i += +c;
          j += +c;
        } else {
          i += 1;
          j += 1;
        }
      }

      if (count >= +r) {
        right = mid;
      } else {
        left = mid;
      }
    }
    return right;
  }

}

let result = binarySearch(l, arrays);
fs.writeFileSync('output.txt', result.toString());