// В классе учатся N человек. Классный руководитель получил указание направить на субботник R бригад по С человек в 
// каждой.

// Все бригады на субботнике будут заниматься переноской бревен. Каждое бревно одновременно несут все члены одной 
// бригады. При этом бревно нести тем удобнее, чем менее различается рост членов этой бригады.

// Числом неудобства бригады будем называть разность между ростом самого высокого и ростом самого низкого членов 
// этой бригады (если в бригаде только один человек, то эта разница равна 0). Классный руководитель решил сформировать 
// бригады так, чтобы максимальное из чисел неудобства сформированных бригад было минимально. Помогите ему в этом!

// Рассмотрим следующий пример. Пусть в классе 8 человек, рост которых в сантиметрах равен 170, 205, 225, 190, 260, 
// 130, 225, 160, и необходимо сформировать две бригады по три человека в каждой. Тогда одним из вариантов является 
// такой:

// 1 бригада: люди с ростом 225, 205, 225

// 2 бригада: люди с ростом 160, 190, 170

// При этом число неудобства первой бригады будет равно 20, а число неудобства второй — 30. Максимальное из чисел 
// неудобств будет 30, и это будет наилучший возможный результат.

// Формат ввода
// Сначала вводятся натуральные числа N, R и C — количество человек в классе, количество бригад и количество человек 
// в каждой бригаде (1 ≤ R∙C ≤ N ≤ 100 000). Далее вводятся N целых чисел — рост каждого из N учеников. Рост ученика 
// — натуральное число, не превышающее 1 000 000 000.

// Формат вывода
// Выведите одно число — наименьше возможное значение максимального числа неудобства сформированных бригад.

// Пример
// Ввод	
// 8 2 3
// 170
// 205
// 225
// 190
// 260
// 130
// 225
// 160
// Вывод
// 30

const fs = require('fs');

const data = fs.readFileSync('input.txt', { encoding: 'utf8' });
const [n, r, c] = data.toString().trim().split('\n')[0].split(' ');
const arr = data.toString().trim().split('\n').slice(1).map(Number);

const binarySearch = (r, c, arr) => {
  arr.sort((a, b) => a - b);
  let max = arr[arr.length - 1] - arr[0];

  let right = max + 1;
  let left = -1;
  let mid;

  while (right - left > 1) {
    mid = Math.floor((right + left) / 2);

    let count = 0;

    let i = 0;
    let j = c - 1;

    while (i <= arr.length - c && j < arr.length) {
      if (arr[j] - arr[i] <= mid) {
        count++;
        i += +c;
        j += +c;
      } else {
        i += 1;
        j += 1;
      }
    }

    if (count >= +r) {
      right = mid;
    } else {
      left = mid;
    }
  }
  return right;
}

let result = binarySearch(r, c, arr);
fs.writeFileSync('output.txt', result.toString());