// В парке города Питсбурга есть чудесная аллея, состоящая из N посаженных в один ряд деревьев, каждое 
// одного из K сортов. В связи с тем, что Питсбург принимает открытый чемпионат Байтландии по 
// программированию, было решено построить огромную арену для проведения соревнований. Так, согласно 
// этому плану вся аллея подлежала вырубке. Однако министерство деревьев и кустов воспротивилось этому 
// решению, и потребовало оставить некоторые из деревьев в покое. Согласно новому плану строительства 
// все деревья, которые не будут вырублены, должны образовывать один непрерывный отрезок, являющийся 
// подотрезком исходного. Каждого из K видов деревьев требуется сохранить хотя бы по одному экземпляру. 
// На вас возложена задача найти отрезок наименьшей длины, удовлетворяющий указанным ограничениям.

// Формат ввода
// В первой строке входного файла находятся два числа N и K(1 ≤ N, K ≤ 250000).Во второй строке входного 
// файла следуют N чисел(разделенных пробелами), i - ое число второй строки задает цвет i - ого слева 
// дерева в аллее.Гарантируется, что присутствует хотя бы одно дерево каждого цвета
// 
// Формат вывода
// В выходной файл выведите два числа, координаты левого и правого концов отрезка минимальной длины,
// удовлетворяющего условию.Если оптимальных ответов несколько, выведите любой.
// 
// Пример 1
// Ввод
// 5 3
// 1 2 1 3 2
// Вывод
// 2 4

// Пример 2
// Ввод	
// 6 4
// 2 4 2 3 3 1
// Вывод
// 2 6
const fs = require('fs');

const data = fs.readFileSync('input.txt', { encoding: 'utf8' });
const list = data.toString().trim().split('\n');
const number = +list[0].split(' ')[1];
const length = +list[0].split(' ')[0];
const trees = list[1].split(' ').map(Number);
const dict = new Map();
let result = '';
let i = 0;
let j = 0;
let count = 0;
let num = length;

while (i < length && j < length) {
  if (!dict.has(trees[j])) {
    dict.set(trees[j], 0);
  }
  let value = dict.get(trees[j]) + 1;
  dict.set(trees[j], value);
  j++;

  if (value === 1) {
    count++;
  }

  let valuePrev = dict.get(trees[i]);

  while (valuePrev > 1) {
    valuePrev--;
    dict.set(trees[i], valuePrev);
    i++;
    if (valuePrev === 0) {
      count--;
    }
    valuePrev = dict.get(trees[i])
  }

  if (count === number) {
    if (j - i <= num) {
      result = `${i + 1} ${j}`;
      num = j - i;
    }
  }
}
fs.writeFileSync('output.txt', result.toString());